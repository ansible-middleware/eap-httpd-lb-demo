---
- name: Subscribe eap machines
  include_role:
    name: "{{ role_path }}/../infra-ansible/roles/rhsm"
  when: rhsm_manage | bool

- name: Install Packages
  yum:
    name: "{{ yum_packages }}"
    state: latest
  notify:
    - Restart eap

- name: Update EAP rpm configuration file
  lineinfile:
    path: /etc/opt/rh/eap7/wildfly/eap7-standalone.conf
    line: "{{ item.line }}"
    regex: "{{ item.regex }}"
  loop:
    - { regex: "^WILDFLY_BIND", line: "WILDFLY_BIND={{ jboss_eap_bind }}" }
    - { regex: "^WILDFLY_SERVER_CONFIG", line: "WILDFLY_SERVER_CONFIG={{ jboss_eap_service_config }}" }
    - { regex: "^WILDFLY_OPTS", line: "WILDFLY_OPTS=\"-bmanagement {{ jboss_eap_bind }}\"" }
    - { regex: "^JAVA_OPTS", line: "JAVA_OPTS=\"-Djboss.node.name={{ ansible_hostname }}\"" }
  notify:
    - Restart eap

- name: Start eap
  service:
    name: "{{ jboss_eap_service_name }}"
    state: started

- name: "Wait for EAP to Management Port to become available"
  uri:
    url: "http://127.0.0.1:{{ management_port }}/health"
    status_code: 200
  register: result
  until: result.status == 200
  retries: 60
  delay: 3

- name: Deploy Applications to EAP
  include_tasks: deploy_app.yml
  loop: "{{ deploy_apps }}"
  loop_control:
    loop_var: app

- name: Get List of Standard Sockets
  command: >
    {{ jboss_home }}/bin/jboss-cli.sh --output-json -c --controller="localhost:{{ management_port }}" --command="/socket-binding-group=standard-sockets:read-resource(recursive=true)"
  args:
    chdir: "{{ jboss_home }}"
  ignore_errors: true
  register: standard_sockets

- name: Add httpd proxy
  command: >
    {{ jboss_home }}/bin/jboss-cli.sh --output-json -c --controller="localhost:{{ management_port }}" --command="/socket-binding-group=standard-sockets/remote-destination-outbound-socket-binding={{ hostvars[item]['ansible_hostname'] }}:add(host={{ hostvars[item]['ansible_default_ipv4']['address']}},port={{ mod_cluster_port }})"
  when: not (standard_sockets.stdout | from_json)['result']['remote-destination-outbound-socket-binding'] or hostvars[item]['ansible_hostname'] not in ((standard_sockets.stdout | from_json)['result']['remote-destination-outbound-socket-binding'].keys() | list)
  loop: "{{ groups['httpd'] }}"

- name: Update httpd proxy
  command: >
    {{ jboss_home }}/bin/jboss-cli.sh --output-json -c --controller="localhost:{{ management_port }}" --commands="/socket-binding-group=standard-sockets/remote-destination-outbound-socket-binding={{ hostvars[item]['ansible_hostname'] }}:write-attribute(name="host",value={{ hostvars[item]['ansible_default_ipv4']['address']}}),/socket-binding-group=standard-sockets/remote-destination-outbound-socket-binding={{ hostvars[item]['ansible_hostname'] }}:write-attribute(name="port",value={{ mod_cluster_port }})"
  when: (standard_sockets.stdout | from_json)['result']['remote-destination-outbound-socket-binding'] and hostvars[item]['ansible_hostname'] in ((standard_sockets.stdout | from_json)['result']['remote-destination-outbound-socket-binding'].keys() | list)
  loop: "{{ groups['httpd'] }}"

- name: Update Modcluster proxies
  command: >
    {{ jboss_home }}/bin/jboss-cli.sh --output-json -c --controller="localhost:{{ management_port }}" --commands="/subsystem=modcluster/proxy=default:write-attribute(name=proxies,value=[{%for host in groups['httpd']%}{{ hostvars[host]['ansible_hostname'] }}{% if not loop.last %} {% endif %}{% endfor %}])"

- name: Reload Server
  command: >
   {{ jboss_home }}/bin/jboss-cli.sh --output-json -c --controller="localhost:{{ management_port }}" --command=":reload"

